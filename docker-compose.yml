services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fantasy_db
    environment:
      POSTGRES_USER: ${DB_USER:-fantasy_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fantasy_pass}
      POSTGRES_DB: ${DB_NAME:-fantasy_football}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - fantasy_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fantasy_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fantasy_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fantasy_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fantasy_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-fantasy_user}:${DB_PASSWORD:-fantasy_pass}@postgres:5432/${DB_NAME:-fantasy_football}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
      - ./models:/app/models
    ports:
      - "8000:8000"
    networks:
      - fantasy_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Streamlit Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fantasy_frontend
    environment:
      API_BASE_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_THEME_BASE: light
      STREAMLIT_THEME_PRIMARY_COLOR: "#3b82f6"
    volumes:
      - ./frontend:/app
    ports:
      - "8501:8501"
    networks:
      - fantasy_network
    depends_on:
      - backend
    command: streamlit run app.py --server.port 8501 --server.address 0.0.0.0

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fantasy_celery
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-fantasy_user}:${DB_PASSWORD:-fantasy_pass}@postgres:5432/${DB_NAME:-fantasy_football}
      REDIS_URL: redis://redis:6379
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
      - ./models:/app/models
    networks:
      - fantasy_network
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A tasks worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fantasy_celery_beat
    environment:
      DATABASE_URL: postgresql+asyncpg://${DB_USER:-fantasy_user}:${DB_PASSWORD:-fantasy_pass}@postgres:5432/${DB_NAME:-fantasy_football}
      REDIS_URL: redis://redis:6379
      PYTHONPATH: /app
    volumes:
      - ./backend:/app
    networks:
      - fantasy_network
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A tasks beat --loglevel=info

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fantasy_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fantasy_network
    depends_on:
      - backend
      - frontend

networks:
  fantasy_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
